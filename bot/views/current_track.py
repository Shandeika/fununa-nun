import asyncio

import discord.ui
import wavelink

from utils import seconds_to_duration


class CurrentTrack(discord.ui.View):
    def __init__(self, player: wavelink.Player):
        super().__init__(timeout=None)
        self.player = player
        self.setup_buttons()
        self.embed = None

    def setup_buttons(self):
        try:
            history_track_index = self.player.queue.history.index(self.player.current)
            is_previous_track_available = history_track_index > 0
        except ValueError:
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏, –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            is_previous_track_available = False

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏
            is_next_track_available = bool(self.player.queue[0])
        except IndexError:
            # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏, —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            is_next_track_available = False

        # –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ–ø–ª–µ–π
        is_next_track_available = (
            is_next_track_available
            or self.player.autoplay == wavelink.AutoPlayMode.enabled
        )

        buttons_rows = [
            [
                PreviousTrackButton(self.player, not is_previous_track_available),
                PlayPauseButton(self.player),
                NextTrackButton(self.player, not is_next_track_available),
                VolumeUpButton(self.player),
            ],
            [
                BackwardButton(self.player),
                ShuffleButton(self.player),
                ForwardButton(self.player),
                VolumeDownButton(self.player),
            ],
        ]

        for i, button_row in enumerate(buttons_rows):
            for button in button_row:
                button.row = i
                self.add_item(button)

    async def update_buttons(self):
        self.clear_items()
        self.setup_buttons()
        await self.message.edit(view=self)

    async def generate_embed(self):
        while not self.player.current:
            i = 0
            await asyncio.sleep(0.1)
            i += 1
            if i == 10:
                break
        embed = discord.Embed(
            title="–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç",
            description=f"{self.player.current.title}\n–ê–≤—Ç–æ—Ä: {self.player.current.author}",
            color=discord.Color.green(),
        )
        if (
            hasattr(self.player.current.extras, "requester")
            and self.player.current.extras.requester
        ):
            requester = await self.player.client.fetch_user(
                self.player.current.extras.requester
            )
        elif (
            hasattr(self.player.current, "requester") and self.player.current.requester
        ):
            requester = await self.player.client.fetch_user(
                self.player.current.requester
            )
        else:
            requester = None
        if requester:
            embed.set_author(
                name=f"–ó–∞–ø—Ä–æ—Å–∏–ª {requester.name}", icon_url=requester.display_avatar.url
            )
        embed.add_field(
            value=f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {seconds_to_duration(self.player.current.length // 1000)}",
            name=f"–°—Å—ã–ª–∫–∞: {self.player.current.uri}",
        )
        if self.player.current.artwork:
            embed.set_thumbnail(url=self.player.current.artwork)
        elif self.player.current.preview_url:
            embed.set_thumbnail(url=self.player.current.preview_url)
        if self.player.current.album and self.player.current.album.name:
            embed.add_field(
                name="–ê–ª—å–±–æ–º",
                value=f"{self.player.current.album.name}\n{self.player.current.album.url}",
            )
        if self.player.current and self.player.current.recommended:
            embed.set_footer(text="–¢—Ä–µ–∫ –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")

        return embed

    async def update_embed(self):
        self.embed = await self.generate_embed()
        await self.message.edit(embed=self.embed, view=self)


class PreviousTrackButton(discord.ui.Button):
    def __init__(self, player: wavelink.Player, disabled: bool):
        super().__init__(
            style=discord.ButtonStyle.primary,
            emoji="‚è™",
            disabled=disabled,
        )
        self.player = player

    async def callback(self, interaction: discord.Interaction):
        history_track_index = self.player.queue.history.index(self.player.current)
        if history_track_index > 0:
            current_track = self.player.queue.history[history_track_index]
            previous_track = self.player.queue.history[history_track_index - 1]
            self.player.queue.put_at(0, current_track)
            self.player.queue.put_at(0, previous_track)
            await self.player.skip()
            await self.view.update_embed()
            await self.view.update_buttons()
            embed = discord.Embed(title="–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫", color=discord.Color.green())
            return await interaction.response.send_message(
                embed=embed, ephemeral=True, delete_after=0.1
            )
        else:
            embed = discord.Embed(
                title="–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞", color=discord.Color.red()
            )
            return await interaction.response.send_message(
                embed=embed, ephemeral=True, delete_after=5
            )


class NextTrackButton(discord.ui.Button):
    def __init__(self, player: wavelink.Player, disabled):
        super().__init__(
            style=discord.ButtonStyle.primary,
            emoji="‚è©",
            disabled=disabled,
        )
        self.player = player

    async def callback(self, interaction: discord.Interaction):
        try:
            await self.player.skip(force=True)
            await self.view.update_embed()
            await self.view.update_buttons()
            embed = discord.Embed(title="–°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫", color=discord.Color.green())
            return await interaction.response.send_message(
                embed=embed, ephemeral=True, delete_after=0.1
            )
        except wavelink.QueueEmpty:
            embed = discord.Embed(
                title="–ù–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞", color=discord.Color.green()
            )
            await self.view.update_embed()
            await self.view.update_buttons()
            return await interaction.response.send_message(
                embed=embed, ephemeral=True, delete_after=0.1
            )


class PlayPauseButton(discord.ui.Button):
    def __init__(self, player: wavelink.Player):
        self.player = player
        if self.player.paused:
            super().__init__(
                style=discord.ButtonStyle.primary,
                emoji="‚ñ∂",
            )
        else:
            super().__init__(
                style=discord.ButtonStyle.primary,
                emoji="‚è∏",
            )

    async def callback(self, interaction: discord.Interaction):
        if self.player.paused:
            await self.player.pause(not self.player.paused)
            embed = discord.Embed(
                title="–ú—É–∑—ã–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞", color=discord.Color.green()
            )
        else:
            await self.player.pause(not self.player.paused)
            embed = discord.Embed(
                title="–ú—É–∑—ã–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", color=discord.Color.green()
            )
        await self.view.update_buttons()
        await self.view.update_embed()
        return await interaction.response.send_message(
            embed=embed, ephemeral=True, delete_after=0.1
        )


class ShuffleButton(discord.ui.Button):
    def __init__(self, player: wavelink.Player):
        self.player = player
        super().__init__(
            style=discord.ButtonStyle.primary,
            emoji="üîÄ",
        )

    async def callback(self, interaction: discord.Interaction):
        self.player.queue.shuffle()
        embed = discord.Embed(title="–û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–º–µ—à–∞–Ω–∞", color=discord.Color.green())
        return await interaction.response.send_message(
            embed=embed, ephemeral=True, delete_after=0.1
        )


class BackwardButton(discord.ui.Button):
    def __init__(self, player: wavelink.Player):
        super().__init__(
            style=discord.ButtonStyle.primary,
            emoji="‚Ü™",
        )
        self.player = player

    async def callback(self, interaction: discord.Interaction):
        if not self.player.current.is_seekable:
            embed = discord.Embed(
                title="–¢—Ä–µ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–º–æ—Ç–∞–Ω", color=discord.Color.red()
            )
            return await interaction.response.send_message(
                embed=embed, ephemeral=True, delete_after=0.1
            )
        current_position = self.player.position
        if current_position > 10 * 1000:
            await self.player.seek(current_position - (10 * 1000))
        else:
            await self.player.seek(0)
        embed = discord.Embed(
            title="–¢—Ä–µ–∫ –ø–µ—Ä–µ–º–æ—Ç–∞–Ω –Ω–∞ 10 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥", color=discord.Color.green()
        )
        return await interaction.response.send_message(
            embed=embed, ephemeral=True, delete_after=0.1
        )


class ForwardButton(discord.ui.Button):
    def __init__(self, player: wavelink.Player):
        super().__init__(
            style=discord.ButtonStyle.primary,
            emoji="‚Ü©",
        )
        self.player = player

    async def callback(self, interaction: discord.Interaction):
        if not self.player.current.is_seekable:
            embed = discord.Embed(
                title="–¢—Ä–µ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–º–æ—Ç–∞–Ω", color=discord.Color.red()
            )
            return await interaction.response.send_message(
                embed=embed, ephemeral=True, delete_after=0.1
            )
        current_position = self.player.position
        await self.player.seek(current_position + (10 * 1000))
        embed = discord.Embed(
            title="–¢—Ä–µ–∫ –ø–µ—Ä–µ–º–æ—Ç–∞–Ω –Ω–∞ 10 —Å–µ–∫—É–Ω–¥ –≤–ø–µ—Ä–µ–¥", color=discord.Color.green()
        )
        return await interaction.response.send_message(
            embed=embed, ephemeral=True, delete_after=0.1
        )


class VolumeUpButton(discord.ui.Button):
    def __init__(self, player: wavelink.Player):
        super().__init__(
            style=discord.ButtonStyle.primary,
            emoji="üîä",
        )
        self.player = player

    async def callback(self, interaction: discord.Interaction):
        if self.player.volume >= 990:
            await self.player.set_volume(1000)
            embed = discord.Embed(
                title="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", color=discord.Color.red()
            )
            return await interaction.response.send_message(
                embed=embed, ephemeral=True, delete_after=0.1
            )
        await self.player.set_volume(self.player.volume + 10)
        embed = discord.Embed(
            title=f"–ì—Ä–æ–º–∫–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ {self.player.volume}",
            color=discord.Color.green(),
        )
        return await interaction.response.send_message(
            embed=embed, ephemeral=True, delete_after=0.1
        )


class VolumeDownButton(discord.ui.Button):
    def __init__(self, player: wavelink.Player):
        super().__init__(
            style=discord.ButtonStyle.primary,
            emoji="üîâ",
        )
        self.player = player

    async def callback(self, interaction: discord.Interaction):
        if self.player.volume <= 10:
            await self.player.set_volume(0)
            embed = discord.Embed(title="–ó–≤—É–∫ –≤—ã–∫–ª—é—á–µ–Ω", color=discord.Color.green())
            return await interaction.response.send_message(
                embed=embed, ephemeral=True, delete_after=0.1
            )
        await self.player.set_volume(self.player.volume - 10)
        embed = discord.Embed(
            title=f"–ì—Ä–æ–º–∫–æ—Å—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∞ –¥–æ {self.player.volume}",
            color=discord.Color.green(),
        )
        return await interaction.response.send_message(
            embed=embed, ephemeral=True, delete_after=0.1
        )
